# RUN: choco-opt %s | filecheck %s
def ez(I:bool) -> [[[[[[[[object]]]]]]]]:

	return not not not 404 + (not []) or not [] or [][False] if (not -[]) else _ if not -[] else not E
	pass
	

pass
pass
pass
pass
pass
pass
pass

# CHECK: module() {
# CHECK-NEXT:  choco.ast.program() {
# CHECK-NEXT:    choco.ast.func_def() ["func_name" = "ez"] {
# CHECK-NEXT:      choco.ast.typed_var() ["var_name" = "I"] {
# CHECK-NEXT:        choco.ast.type_name() ["type_name" = "bool"]
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.list_type() {
# CHECK-NEXT:        choco.ast.list_type() {
# CHECK-NEXT:          choco.ast.list_type() {
# CHECK-NEXT:            choco.ast.list_type() {
# CHECK-NEXT:              choco.ast.list_type() {
# CHECK-NEXT:                choco.ast.list_type() {
# CHECK-NEXT:                  choco.ast.list_type() {
# CHECK-NEXT:                    choco.ast.list_type() {
# CHECK-NEXT:                      choco.ast.type_name() ["type_name" = "object"]
# CHECK-NEXT:                    }
# CHECK-NEXT:                  }
# CHECK-NEXT:                }
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.return() {
# CHECK-NEXT:        choco.ast.if_expr() {
# CHECK-NEXT:          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:              choco.ast.list_expr() {}
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        } {
# CHECK-NEXT:          choco.ast.binary_expr() ["op" = "or"] {
# CHECK-NEXT:            choco.ast.binary_expr() ["op" = "or"] {
# CHECK-NEXT:              choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                  choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                    choco.ast.binary_expr() ["op" = "+"] {
# CHECK-NEXT:                      choco.ast.literal() ["value" = 404 : !i32]
# CHECK-NEXT:                    } {
# CHECK-NEXT:                      choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                        choco.ast.list_expr() {}
# CHECK-NEXT:                      }
# CHECK-NEXT:                    }
# CHECK-NEXT:                  }
# CHECK-NEXT:                }
# CHECK-NEXT:              }
# CHECK-NEXT:            } {
# CHECK-NEXT:              choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                choco.ast.list_expr() {}
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          } {
# CHECK-NEXT:            choco.ast.index_expr() {
# CHECK-NEXT:              choco.ast.list_expr() {}
# CHECK-NEXT:            } {
# CHECK-NEXT:              choco.ast.literal() ["value" = !choco.ast.bool<False>]
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        } {
# CHECK-NEXT:          choco.ast.if_expr() {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                choco.ast.list_expr() {}
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          } {
# CHECK-NEXT:            choco.ast.id_expr() ["id" = "_"]
# CHECK-NEXT:          } {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.id_expr() ["id" = "E"]
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:      choco.ast.pass()
# CHECK-NEXT:    }
# CHECK-NEXT:  } {
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:  }
# CHECK-NEXT:}
# CHECK-NEXT:
