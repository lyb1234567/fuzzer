# RUN: choco-opt %s | filecheck %s
o:[bool]=False
b4_yL_ax ([R[[[]]] // (not not ((not not False)))])=None

# CHECK: module() {
# CHECK-NEXT:  choco.ast.program() {
# CHECK-NEXT:    choco.ast.var_def() {
# CHECK-NEXT:      choco.ast.typed_var() ["var_name" = "o"] {
# CHECK-NEXT:        choco.ast.list_type() {
# CHECK-NEXT:          choco.ast.type_name() ["type_name" = "bool"]
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.literal() ["value" = !choco.ast.bool<False>]
# CHECK-NEXT:    }
# CHECK-NEXT:  } {
# CHECK-NEXT:    choco.ast.assign() {
# CHECK-NEXT:      choco.ast.call_expr() ["func" = "b4_yL_ax"] {
# CHECK-NEXT:        choco.ast.list_expr() {
# CHECK-NEXT:          choco.ast.binary_expr() ["op" = "//"] {
# CHECK-NEXT:            choco.ast.index_expr() {
# CHECK-NEXT:              choco.ast.id_expr() ["id" = "R"]
# CHECK-NEXT:            } {
# CHECK-NEXT:              choco.ast.list_expr() {
# CHECK-NEXT:                choco.ast.list_expr() {}
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          } {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                  choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                    choco.ast.literal() ["value" = !choco.ast.bool<False>]
# CHECK-NEXT:                  }
# CHECK-NEXT:                }
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.literal() ["value" = !choco.ast.none]
# CHECK-NEXT:    }
# CHECK-NEXT:  }
# CHECK-NEXT:}
# CHECK-NEXT:
