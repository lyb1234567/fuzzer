# RUN: choco-opt %s | filecheck %s
for Y__T in not None if not yem ([not not __9 ([])[not not P] if [] else x if not -(not True) else not not _ if not not [] else not [] if not not not not U else False if not not not not not not D else not not False]) - "" else not not [] or [][([])] and not ---(not _)[d]:

	pass
	pass
	


# CHECK: module() {
# CHECK-NEXT:  choco.ast.program() {} {
# CHECK-NEXT:    choco.ast.for() ["iter_name" = "Y__T"] {
# CHECK-NEXT:      choco.ast.if_expr() {
# CHECK-NEXT:        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:          choco.ast.binary_expr() ["op" = "-"] {
# CHECK-NEXT:            choco.ast.call_expr() ["func" = "yem"] {
# CHECK-NEXT:              choco.ast.list_expr() {
# CHECK-NEXT:                choco.ast.if_expr() {
# CHECK-NEXT:                  choco.ast.list_expr() {}
# CHECK-NEXT:                } {
# CHECK-NEXT:                  choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                    choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                      choco.ast.index_expr() {
# CHECK-NEXT:                        choco.ast.call_expr() ["func" = "__9"] {
# CHECK-NEXT:                          choco.ast.list_expr() {}
# CHECK-NEXT:                        }
# CHECK-NEXT:                      } {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                            choco.ast.id_expr() ["id" = "P"]
# CHECK-NEXT:                          }
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    }
# CHECK-NEXT:                  }
# CHECK-NEXT:                } {
# CHECK-NEXT:                  choco.ast.if_expr() {
# CHECK-NEXT:                    choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                      choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.literal() ["value" = !choco.ast.bool<True>]
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    }
# CHECK-NEXT:                  } {
# CHECK-NEXT:                    choco.ast.id_expr() ["id" = "x"]
# CHECK-NEXT:                  } {
# CHECK-NEXT:                    choco.ast.if_expr() {
# CHECK-NEXT:                      choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.list_expr() {}
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    } {
# CHECK-NEXT:                      choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.id_expr() ["id" = "_"]
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    } {
# CHECK-NEXT:                      choco.ast.if_expr() {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                              choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                                choco.ast.id_expr() ["id" = "U"]
# CHECK-NEXT:                              }
# CHECK-NEXT:                            }
# CHECK-NEXT:                          }
# CHECK-NEXT:                        }
# CHECK-NEXT:                      } {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.list_expr() {}
# CHECK-NEXT:                        }
# CHECK-NEXT:                      } {
# CHECK-NEXT:                        choco.ast.if_expr() {
# CHECK-NEXT:                          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                              choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                                choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                                  choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                                    choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                                      choco.ast.id_expr() ["id" = "D"]
# CHECK-NEXT:                                    }
# CHECK-NEXT:                                  }
# CHECK-NEXT:                                }
# CHECK-NEXT:                              }
# CHECK-NEXT:                            }
# CHECK-NEXT:                          }
# CHECK-NEXT:                        } {
# CHECK-NEXT:                          choco.ast.literal() ["value" = !choco.ast.bool<False>]
# CHECK-NEXT:                        } {
# CHECK-NEXT:                          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                              choco.ast.literal() ["value" = !choco.ast.bool<False>]
# CHECK-NEXT:                            }
# CHECK-NEXT:                          }
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    }
# CHECK-NEXT:                  }
# CHECK-NEXT:                }
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          } {
# CHECK-NEXT:            choco.ast.literal() ["value" = ""]
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      } {
# CHECK-NEXT:        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:          choco.ast.literal() ["value" = !choco.ast.none]
# CHECK-NEXT:        }
# CHECK-NEXT:      } {
# CHECK-NEXT:        choco.ast.binary_expr() ["op" = "or"] {
# CHECK-NEXT:          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.list_expr() {}
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        } {
# CHECK-NEXT:          choco.ast.binary_expr() ["op" = "and"] {
# CHECK-NEXT:            choco.ast.index_expr() {
# CHECK-NEXT:              choco.ast.list_expr() {}
# CHECK-NEXT:            } {
# CHECK-NEXT:              choco.ast.list_expr() {}
# CHECK-NEXT:            }
# CHECK-NEXT:          } {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                  choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                    choco.ast.index_expr() {
# CHECK-NEXT:                      choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                        choco.ast.id_expr() ["id" = "_"]
# CHECK-NEXT:                      }
# CHECK-NEXT:                    } {
# CHECK-NEXT:                      choco.ast.id_expr() ["id" = "d"]
# CHECK-NEXT:                    }
# CHECK-NEXT:                  }
# CHECK-NEXT:                }
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.pass()
# CHECK-NEXT:      choco.ast.pass()
# CHECK-NEXT:    }
# CHECK-NEXT:  }
# CHECK-NEXT:}
# CHECK-NEXT:
