# RUN: choco-opt %s | filecheck %s
def _() -> [[bool]]:

	return 
	

for d in not not F ([_70 or not (not -(not True)),-[],not (_[not -False])])[(not W)] and not not not "" if (N)[not _] else True[[]]:

	pass
	pass
	pass
	

pass
pass
pass

# CHECK: module() {
# CHECK-NEXT:  choco.ast.program() {
# CHECK-NEXT:    choco.ast.func_def() ["func_name" = "_"] {} {
# CHECK-NEXT:      choco.ast.list_type() {
# CHECK-NEXT:        choco.ast.list_type() {
# CHECK-NEXT:          choco.ast.type_name() ["type_name" = "bool"]
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.return() {}
# CHECK-NEXT:    }
# CHECK-NEXT:  } {
# CHECK-NEXT:    choco.ast.for() ["iter_name" = "d"] {
# CHECK-NEXT:      choco.ast.if_expr() {
# CHECK-NEXT:        choco.ast.index_expr() {
# CHECK-NEXT:          choco.ast.id_expr() ["id" = "N"]
# CHECK-NEXT:        } {
# CHECK-NEXT:          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:            choco.ast.id_expr() ["id" = "_"]
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      } {
# CHECK-NEXT:        choco.ast.binary_expr() ["op" = "and"] {
# CHECK-NEXT:          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.index_expr() {
# CHECK-NEXT:                choco.ast.call_expr() ["func" = "F"] {
# CHECK-NEXT:                  choco.ast.list_expr() {
# CHECK-NEXT:                    choco.ast.binary_expr() ["op" = "or"] {
# CHECK-NEXT:                      choco.ast.id_expr() ["id" = "_70"]
# CHECK-NEXT:                    } {
# CHECK-NEXT:                      choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                              choco.ast.literal() ["value" = !choco.ast.bool<True>]
# CHECK-NEXT:                            }
# CHECK-NEXT:                          }
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    }
# CHECK-NEXT:                    choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                      choco.ast.list_expr() {}
# CHECK-NEXT:                    }
# CHECK-NEXT:                    choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                      choco.ast.index_expr() {
# CHECK-NEXT:                        choco.ast.id_expr() ["id" = "_"]
# CHECK-NEXT:                      } {
# CHECK-NEXT:                        choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                          choco.ast.unary_expr() ["op" = "-"] {
# CHECK-NEXT:                            choco.ast.literal() ["value" = !choco.ast.bool<False>]
# CHECK-NEXT:                          }
# CHECK-NEXT:                        }
# CHECK-NEXT:                      }
# CHECK-NEXT:                    }
# CHECK-NEXT:                  }
# CHECK-NEXT:                }
# CHECK-NEXT:              } {
# CHECK-NEXT:                choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                  choco.ast.id_expr() ["id" = "W"]
# CHECK-NEXT:                }
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        } {
# CHECK-NEXT:          choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:            choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:              choco.ast.unary_expr() ["op" = "not"] {
# CHECK-NEXT:                choco.ast.literal() ["value" = ""]
# CHECK-NEXT:              }
# CHECK-NEXT:            }
# CHECK-NEXT:          }
# CHECK-NEXT:        }
# CHECK-NEXT:      } {
# CHECK-NEXT:        choco.ast.index_expr() {
# CHECK-NEXT:          choco.ast.literal() ["value" = !choco.ast.bool<True>]
# CHECK-NEXT:        } {
# CHECK-NEXT:          choco.ast.list_expr() {}
# CHECK-NEXT:        }
# CHECK-NEXT:      }
# CHECK-NEXT:    } {
# CHECK-NEXT:      choco.ast.pass()
# CHECK-NEXT:      choco.ast.pass()
# CHECK-NEXT:      choco.ast.pass()
# CHECK-NEXT:    }
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:    choco.ast.pass()
# CHECK-NEXT:  }
# CHECK-NEXT:}
# CHECK-NEXT:
